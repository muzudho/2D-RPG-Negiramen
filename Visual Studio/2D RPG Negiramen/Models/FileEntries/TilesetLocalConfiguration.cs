namespace _2D_RPG_Negiramen.Models.FileEntries;

using Tomlyn.Model;
using Tomlyn;
using TheFileEntryLocations = _2D_RPG_Negiramen.Models.FileEntries.Locations;

/// <summary>
///     😁 タイルセット・ローカル構成
///     
///     <list type="bullet">
///         <item>イミュータブル</item>
///     </list>
/// </summary>
internal class TilesetLocalConfiguration
{
    // - その他

    #region その他（生成　関連）
    /// <summary>
    ///     読込。なければ作成
    ///     
    ///     <list type="bullet">
    ///         <item>ファイル・ステムが UUID ではないとき、タイルセット・グローバル構成ファイルは存在しないし、作成できない</item>
    ///     </list>
    /// </summary>
    /// <param name="tilesetPngFileStem">タイルセットPNG画像ファイルのステム。UUID という想定（UUIDじゃないかもしれない）</param>
    /// <param name="newConfiguration">新ファイル</param>
    internal static bool TryLoadOrAdd(
        UUID tilesetUuid,
        out TilesetLocalConfiguration? newConfiguration,
        out bool isNew)
    {
        isNew = false;

        //// ファイル・ステムが UUID ではないなら、読込みません
        //if (!UUIDHelper.IsMatch(tilesetPngFileStem.AsStr))
        //{
        //    newConfiguration = null;
        //    return false;
        //}

        // タイルセット・ローカル構成ファイルの場所（TOML）
        var tilesetLocalConfigurationLocation = App.GetOrLoadProjectConfiguration().UnityAssetsFolderLocation.YourCircleFolder.YourWorkFolder.AutoGeneratedFolder.ImagesFolder.TilesetsFolder.LocalesFolder.CreateSelectedLocaleFolder().CreateTilesetLocalToml(tilesetUuid);

        // ファイルの存在確認
        if (tilesetLocalConfigurationLocation.IsExists())
        {
            // あれば読込

            // 設定ファイルのテキスト読取
            var configurationText = System.IO.File.ReadAllText(tilesetLocalConfigurationLocation.Path.AsStr);

            TilesetTitle? localTitle = null;
            Author? localAuthor = null;

            // TOML
            TomlTable document = Toml.ToModel(configurationText);

            if (document != null)
            {
                //
                // [local]
                // =======
                //
                if (document.TryGetValue("local", out object localTomlObj))
                {
                    if (localTomlObj != null && localTomlObj is TomlTable localTomlTable)
                    {
                        // タイトル
                        if (localTomlTable.TryGetValue("title", out object titleStringObj))
                        {
                            if (titleStringObj is string titleAsStr)
                            {
                                localTitle = TilesetTitle.FromString(titleAsStr);
                            }
                        }

                        // 著者
                        if (localTomlTable.TryGetValue("author", out object authorStringObj))
                        {
                            if (authorStringObj is string authorAsStr)
                            {
                                localAuthor = Author.FromString(authorAsStr);
                            }
                        }
                    }
                }
            }

            // ファイルを元に新規作成
            newConfiguration = new TilesetLocalConfiguration(
                title: localTitle ?? throw new Exception(),
                author: localAuthor ?? throw new Exception());

            return true;
        }
        else
        {
            isNew = true;

            // なければ新規作成
            newConfiguration = new TilesetLocalConfiguration(
                title: TilesetTitle.Empty,
                author: Author.Empty);

            // ファイル書出し
            WriteTOML(
                tilesetLocalConfigurationLocation: tilesetLocalConfigurationLocation,
                configuration: newConfiguration);

            return true;
        }
    }

    /// <summary>
    ///     生成
    /// </summary>
    /// <param name="location">タイルセット・グローバル構成ファイルの場所</param>
    TilesetLocalConfiguration(
        TilesetTitle title,
        Author author)
    {
        this.Title = title;
        this.Author = author;
    }
    #endregion

    // - インターナル静的メソッド

    #region メソッド（保存）
    /// <summary>
    ///     保存
    /// </summary>
    /// <param name="current">現在の構成</param>
    /// <param name="difference">現在の構成から更新した差分</param>
    /// <param name="newConfiguration">差分を反映した構成</param>
    /// <returns>完了した</returns>
    internal static bool SaveTOML(TheFileEntryLocations.UnityAssets.Images.TilesetLocalToml tilesetLocalConfigurationLocation, TilesetLocalConfiguration current, TilesetLocalConfigurationBuffer difference, out TilesetLocalConfiguration newConfiguration)
    {
        var configurationBuffer = new TilesetLocalConfigurationBuffer();

        // 差分適用
        configurationBuffer.Title = difference.Title ?? current.Title;
        configurationBuffer.Author = difference.Author ?? current.Author;

        // 差分をマージして、イミュータブルに変換
        newConfiguration = new TilesetLocalConfiguration(
            title: configurationBuffer.Title ?? throw new Exception(),
            author: configurationBuffer.Author ?? throw new Exception());

        WriteTOML(
            tilesetLocalConfigurationLocation: tilesetLocalConfigurationLocation,
            configuration: newConfiguration);

        return true;
    }

    /// <summary>
    ///     テキストファイル書出し
    /// </summary>
    /// <param name="configuration"></param>
    internal static void WriteTOML(TheFileEntryLocations.UnityAssets.Images.TilesetLocalToml tilesetLocalConfigurationLocation, TilesetLocalConfiguration configuration)
    {
        //
        // 注意：　変数展開後のパスではなく、変数展開前のパス文字列を保存すること
        //

        var text = $@"[local]

title = ""{configuration.Title}""
author = ""{configuration.Author}""

[user_defined]
";

        // 上書き
        System.IO.File.WriteAllText(
            path: tilesetLocalConfigurationLocation.Path.AsStr,
            contents: text);
    }
    #endregion

    // - インターナル・プロパティ

    #region プロパティ（タイトル）
    /// <summary>
    ///     タイトル
    /// </summary>
    internal TilesetTitle Title { get; }
    #endregion

    #region プロパティ（著者）
    /// <summary>
    ///     著者
    /// </summary>
    internal Author Author { get; set; } = Author.Empty;
    #endregion
}
