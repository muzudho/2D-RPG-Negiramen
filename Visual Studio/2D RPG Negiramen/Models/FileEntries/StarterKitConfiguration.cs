namespace _2D_RPG_Negiramen.Models.FileEntries
{
    using Tomlyn;
    using Tomlyn.Model;
    using TheLocationOfUnityAssets = _2D_RPG_Negiramen.Models.FileEntries.Locations.UnityAssets;

    /// <summary>
    ///     😁 構成
    /// </summary>
    class StarterKitConfiguration
    {
        // - 静的プロパティー

        internal static string AutoGenerated { get; } = "Auto Generated";

        // - 静的メソッド

        /// <summary>
        ///     <pre>
        ///         TOML形式ファイルの読取
        ///     
        ///         📖　[Tomlyn　＞　Documentation](https://github.com/xoofx/Tomlyn/blob/main/doc/readme.md)
        ///     </pre>
        /// </summary>
        /// <param name="configuration">構成</param>
        /// <returns>TOMLテーブルまたはヌル</returns>
        internal static bool LoadTOML(out StarterKitConfiguration configuration)
        {
            try
            {
                var starterKitConfigurationFilePath = App.GetOrLoadConfiguration().StarterKitFolder.StarterKitConfigurationFile.Path.AsStr;
                // スターターキット構成ファイルへのパスは構成ファイルに与えられているので、これを使う
                // var starterKitConfigurationFilePath = App.GetOrLoadConfiguration().StarterKitConfigurationFile.Path.AsStr;
                // Example: `"C:/Users/むずでょ/Documents/GitHub/2D-RPG-Negiramen/Starter Kit/starter_kit_configuration.toml"`

                // 設定ファイルの読取
                var starterKitConfigurationText = System.IO.File.ReadAllText(starterKitConfigurationFilePath);

                TheLocationOfUnityAssets.ItsFolder unityAssetsFolder = new TheLocationOfUnityAssets.ItsFolder();

                // Locations.StarterKit.StarterKitConfigurationFile starterKitConfiguration = Models.FileEntries.Locations.StarterKit.StarterKitConfigurationFile.Empty;
                // YourCircleFolderName yourCircleFolderName = new YourCircleFolderName();
                // YourWorkFolderName yourWorkFolderName = new YourWorkFolderName();

                // TOML
                TomlTable document = Toml.ToModel(starterKitConfigurationText);

                if (document != null)
                {
                    // 準備
                }

                configuration = new StarterKitConfiguration();
                return true;
            }
            catch (Exception ex)
            {
                // TODO 例外対応、何したらいい（＾～＾）？
                configuration = null;
                return false;
            }
        }

        /// <summary>
        ///     保存
        /// </summary>
        /// <param name="current">現在の構成</param>
        /// <param name="difference">現在の構成から更新した差分</param>
        /// <param name="newConfiguration">差分を反映した構成</param>
        /// <returns>完了した</returns>
        internal static bool SaveTOML(StarterKitConfiguration current, StarterKitConfigurationBuffer difference, out StarterKitConfiguration newConfiguration)
        {
            var configurationBuffer = new StarterKitConfigurationBuffer();

            //
            // 注意：　変数展開後のパスではなく、変数展開前のパス文字列を保存すること
            //
            var text = $@"# 準備
";

            // 上書き
            System.IO.File.WriteAllText(
                // 保存したいファイルへのパス
                path: App.GetOrLoadConfiguration().StarterKitFolder.StarterKitConfigurationFile.Path.AsStr,
                contents: text);

            // イミュータブル・オブジェクトを生成
            newConfiguration = new StarterKitConfiguration();
            return true;
        }

        // - その他

        /// <summary>
        ///     生成
        /// </summary>
        internal StarterKitConfiguration()
        {
        }
    }
}
